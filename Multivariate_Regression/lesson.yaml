- Class: meta
  Course: Econometrics
  Lesson: Multivariate Regression
  Author: Nick Huntington-Klein
  Type: Standard
  Organization: Seattle University
  Version: 2.4.5

- Class: text
  Output: |-
   This Swirl lesson will cover the addition of control variables to regressions, as well as how to work with multivariate regression.
   
   This lesson will make use of the **tidyverse**, **NHANES**, **car**, and **jtools** packages.
   
   If you don't have these, exit out of this lesson with bye(), install the packages with
   
   install.packages(c('tidyverse','NHANES','car','jtools'),dependencies = TRUE)
   
   And then come back in with swirl()

- Class: cmd_question
  Output: Now load the tidyverse package.
  CorrectAnswer: library(tidyverse)
  AnswerTests: omnitest(correctExpr='library(tidyverse)')
  Hint: Just type library(tidyverse)

- Class: cmd_question
  Output: Now load the NHANES package.
  CorrectAnswer: library(NHANES)
  AnswerTests: omnitest(correctExpr='library(NHANES)')
  Hint: Just type library(NHANES)

- Class: cmd_question
  Output: Now load the jtools package.
  CorrectAnswer: library(jtools)
  AnswerTests: omnitest(correctExpr='library(jtools)')
  Hint: Just type library(jtools)

- Class: cmd_question
  Output: Now load the car package.
  CorrectAnswer: library(car)
  AnswerTests: omnitest(correctExpr='library(car)')
  Hint: Just type library(car)

- Class: cmd_question
  Output: |-
   Load the NHANES data from the NHANES package using data(NHANES)
   
   NHANES is the National Health and Nutrition Examination Survey. It covers health and diet measures for a sample of people in the United States.
   
   Today we will be looking at the relationship between sleep and health.
  CorrectAnswer: data(NHANES)
  AnswerTests: exists('NHANES')
  Hint: Just type data(NHANES). Make sure the NHANES package is installed with install.packages('NHANES').

- Class: cmd_question
  Output: |-
   There are a lot of variables in NHANES and we need to know what they do!
   
   Use help(NHANES) to look at the variable descriptions. 
   
   (Don't close it after you're done, you'll need it later)
  CorrectAnswer: help(NHANES)
  AnswerTests: any_of_exprs('help(NHANES)','help("NHANES")')
  Hint: Type help(NHANES)

- Class: cmd_question
  Output: |-
   We are interested in the effect of poor sleep on your physical health.
   
   Run a regression of the *self-reported number of days the participant's physical health was not good out of the past 30 days*
   
   on
   
   *The self-reported number of hours the participant usually gets at night.*
   
   Since this is a bivariate (two-variable) regression, store the regression as biv
  CorrectAnswer: biv <- lm(DaysPhysHlthBad~SleepHrsNight, data = NHANES)
  AnswerTests: ifelse(exists('biv'),identical(predict(biv),predict(lm(DaysPhysHlthBad~SleepHrsNight, data = NHANES))),FALSE)
  Hint: Use lm() to run a regression in the NHANES data, with DaysPhysHlthBad as the dependent variable and SleepHrsNight as the independent variable.

- Class: cmd_question
  Output: Use export_summs() to look at the regression results.  
  CorrectAnswer: export_summs(biv)
  AnswerTests: expr_uses_func('export_summs')
  Hint: Pass the biv regression object to export_summs()

- Class: mult_question
  Output: How can we interpret that -.51 in the table?
  AnswerChoices: Sleeping one more hour per night is associated with an increase in the number of days of bad physical health by .51; Sleeping one more hour per night is associated with a decrease in the number of days of bad physical health by .51; If people slept 0 hours per night, we would predict they'd have -.51 days of bad physical health; The correlation between hours of sleep and days of bad health is -.51; Sleeping one more hour per night is associated with an increase in the number of days of bad physical health by 51 percent; Sleeping one more hour per night is associated with a decrease in the number of days of bad physical health by 51 percent;
  CorrectAnswer: Sleeping one more hour per night is associated with a decrease in the number of days of bad physical health by .51
  AnswerTests: omnitest(correctVal='Sleeping one more hour per night is associated with a decrease in the number of days of bad physical health by .51')
  Hint: In a regression Y~X, the coefficient on X means that a one-unit increase in X is associated with a (coefficient)-unit change in Y

- Class: cmd_question
  Output: |-
   Use the help() file already on display to think about some necessary controls.
   
   A good place to start is to look through and think "is this variable likely to *cause* both hours of sleep *and* days of bad health?"
   
   If the answer is yes, it might need to be in the model!
   
   Find three variables you think should be added to the model (there are many right answers). Then, regress days of bad health on hours of sleep AND your three variables. Store the result as multi1.
  CorrectAnswer: multi1 <- lm(DaysPhysHlthBad~SleepHrsNight + Diabetes + Depressed + Age, data = NHANES)
  AnswerTests: ifelse(exists('multi1'),names(attr(multi1$terms,'dataClasses'))[1] == 'DaysPhysHlthBad' & 'SleepHrsNight' %in% names(attr(multi1$terms,'dataClasses')) & length(names(attr(multi1$terms,'dataClasses'))) >= 4, FALSE)
  Hint: You can regress Y on X, W, and Z using lm(Y~X+W+Z)

- Class: figure
  Output: Consider this diagram of the data-generating process. This diagram shows which variables are relevant to generating the obseved sleep and bad-health values, and how they cause each other, represented by arrows.
  Figure: dag1.R
  FigureType: new

- Class: cmd_question
  Output: |-
   Assume that the diagram is completely accurate and isn't missing anything.
   
   Run a regression of DaysPhysHlthBad on SleepHrsNight and all the controls necessary to causally identify the effect of SleepHrsNight on DaysPhysHlthBad. Don't include any unnecessary controls! Save this regression as multi2.
  CorrectAnswer: multi2 <- lm(DaysPhysHlthBad ~ SleepHrsNight + Age + HHIncomeMid + Depressed + TVHrsDay, data = NHANES)
  AnswerTests: ifelse(exists('multi2'),ifelse(length(predict(multi2)) == length(predict(lm(DaysPhysHlthBad ~ SleepHrsNight + Age + HHIncomeMid + Depressed + TVHrsDay, data = NHANES))), 1 - cor(predict(multi2),predict(lm(DaysPhysHlthBad ~ SleepHrsNight + Age + HHIncomeMid + Depressed + TVHrsDay, data = NHANES))) < .0001,FALSE), FALSE)
  Hint: |-
   You need to include the set of variables that closes all paths other than the ones you're interested in.
   
   A path needs to be closed if you can follow along from SleepHrsNight to DaysPhysHlthBad and at least one arrow points in the direction you came from. These paths represent alternate explanations of why we observe SleepHrsNight and DaysPhysHlthBad being related.
   
   Once you find a path like that, close the path by controlling for any variable along it.

- Class: cmd_question
  Output: Use export_summs() to look at biv and multi2 together. 
  CorrectAnswer: export_summs(biv, multi2)
  AnswerTests: omnitest(correctExpr='export_summs(biv, multi2)')
  Hint: export_summs() can take as arguments each model you want to show, one after the other, separated by commas.

- Class: mult_question
  Output: |-
   (why did some of our variables turn into multiple variables? We'll get to that next lesson...)
   
   Interpret the -.28 coefficient on SleepHrsNight.
  AnswerChoices: If all the control variables were set to 0, an additional hour of sleep would reduce bad-health days by .28; Comparing two people with the same values of all control variables, an additional hour of sleep reduces bad-health days by .28; The influence of the control variables deflates the correlation between sleep hours and bad-health days by .28; An additional hour of sleep reduces bad-health days by -.28/.1 = -2.8
  CorrectAnswer: Comparing two people with the same values of all control variables, an additional hour of sleep reduces bad-health days by .28
  AnswerTests: omnitest(correctVal='Comparing two people with the same values of all control variables, an additional hour of sleep reduces bad-health days by .28')
  Hint: |-
   Adding controls removes the variation in the sleep hours/bad-health-days relationship that is driven by those variables.
   
   In effect, what we have left is as though those control variables were all set to the same value (no variation left!)

- Class: cmd_question
  Output: Use plot_coefs() to see all of the coefficients in both biv and multi2, and examine how much the coefficient on sleep hours is changed by adding the controls.
  CorrectAnswer: plot_coefs(biv, multi2)
  AnswerTests: omnitest(correctVal=plot_coefs(biv, multi2))
  Hint: use plot_coefs like you just used export_summs() with two models.

- Class: cmd_question
  Output: use linearHypothesis() to test whether Age = 0 AND HHIncomeMid = 0.
  CorrectAnswer: linearHypothesis(multi2, c('Age = 0','HHIncomeMid = 0'))
  AnswerTests: omnitest(correctExpr="linearHypothesis(multi2, c('Age = 0','HHIncomeMid = 0'))")
  Hint: The two restrictions should be passed as a string vector, like c('A = 0','B = 0').

- Class: mult_question
  Output: |-
   We clearly reject the null that both of these are 0 at a very low p-value.
   
   When we say we're rejecting the null for this test, what does that imply?
  AnswerChoices: The model predicts significantly better with those two variables included than with them left out; It backs up the significant effect of sleep hours; It shows that at least one of these variables causally affects bad-health days; It shows that the R^2 of this model is high
  CorrectAnswer: The model predicts significantly better with those two variables included than with them left out
  AnswerTests: omnitest(correctVal='The model predicts significantly better with those two variables included than with them left out')
  Hint: F-tests compare a model to a restricted version of that model where certain coefficients are restricted to certain values (in this case, 0 for both of them).

- Class: cmd_question
  Output: |-
   As mentioned, the single TVHrsDay variable turned into MANY TVHrsDay variables - this is because it's a factor variable so it needs a different binary variable for each value it takes.
   
   We'll talk more about that next time. For now, just be aware that you can do an F test of them jointly without having to type every single one of them out using matchCoefs()
   
   Those TV variables don't seem to do much by themselves. But maybe together they're a strong effect? Put in:
   
   linearHypothesis(multi2, matchCoefs(multi2, "TVHrsDay"))
  CorrectAnswer: linearHypothesis(multi2, matchCoefs(multi2, "TVHrsDay"))
  AnswerTests: omnitest(correctExpr='linearHypothesis(multi2, matchCoefs(multi2, "TVHrsDay"))')
  Hint: Just put in linearHypothesis(multi2, matchCoefs(multi2, "TVHrsDay"))

- Class: cmd_question
  Output: |-
   The data example_dgp has been placed in your environment. It was created using the code:
   
   example_dgp <- tibble(u = rnorm(100), C = rnorm(100), B = rnorm(100)) %>%

      mutate(D = u + rnorm(100), E = u + rnorm(100), A = C + B + rnorm(100)) %>%

      mutate(X = C + D + E + rnorm(100)) %>%

      mutate(Y = X + B + D + rnorm(100))
      
   Run a regression of Y on X and any controls necessary to identify the effect of X on Y. Don't include any unnecessary controls! Store the result as final
  CorrectAnswer: final <- lm(Y ~ X + D, data=example_dgp)
  AnswerTests: ifelse(exists('final'), identical(predict(final),predict(lm(Y~X + D, data=example_dgp))),FALSE)
  Hint: There are a lot of variables here but not a lot to control for! Think! Is this variable actually providing an alternate explanation?

- Class: cmd_question
  Output: Use export_summs() to look at the result of final and see how close your coefficient on X got to the true value of 1. Then that's it!
  CorrectAnswer: export_summs(final)
  AnswerTests: omnitest(correctExpr='export_summs(final)')
  Hint: Just give final to export_summs()
